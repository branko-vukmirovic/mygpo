openapi: 3.0.0
info:
  description: "gpodder.net APIs"
  version: "2.11.0"
  title: "gpodder.net APIs"
  contact:
    email: "dellagustin.developer@gmail.com"
  license:
    name: "GNU Affero General Public License v3.0"
    url: "https://github.com/podStation/mygpo/blob/master/COPYING"
servers:
  - url: https://gpodder.net/api/2
    description: "Client parametrization server"
tags:
- name: "Client Parametrization"
  externalDocs:
    description: "Find out more"
    url: "https://gpoddernet.readthedocs.io/en/latest/api/reference/clientconfig.html"
- name: "Authentication"
  externalDocs:
    description: "Find out more"
    url: "https://gpoddernet.readthedocs.io/en/latest/api/reference/auth.html"
- name: "Directory"
  externalDocs:
    description: "Find out more"
    url: "https://gpoddernet.readthedocs.io/en/latest/api/reference/directory.html"
paths:
  /clientconfig.json:
    # Server override as it is not an API
    servers:
      - url: https://gpodder.net
    get:
      tags:
      - "Client Parametrization"
      summary: "Retrieves client parametrization"
      description: ""
      operationId: "getClientParametrization"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientConfiguration"
  /auth/{username}/login.json:
    post:
      tags:
      - "Authentication"
      summary: Log in the given user for the given device via HTTP Basic Auth.
      parameters:
      - name: "username"
        in: "path"
        description: "Username to login"
        required: true
        schema:
          type: "string"
      security:
        - basicAuth: []
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
        400:
          description: "Cookies have different username then the one provided"
  /auth/{username}/logout.json:
    post:
      tags:
      - "Authentication"
      summary: "Log out user"
      description: "Log out the given user. Removes the session ID from the database."
      parameters:
      - name: "username"
        in: "path"
        description: "Username to login"
        required: true
        schema:
          type: "string"
      security:
        - basicAuth: []
      responses:
        200:
          description: "OK"
        400:
          description: "if the client provides a cookie, but for a different username than the one given"
  /tags/{count}.json:
    get:
      tags:
      - "Directory"
      summary: "Retrieve Top Tags"
      parameters:
      - name: "count"
        in: "path"
        description: "number of tags to return"
        required: true
        schema:
          type: "number"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /tag/{tag}/{count}.json:
    get:
      tags:
      - "Directory"
      summary: "Retrieve Podcasts for Tag"
      parameters:
      - name: "count"
        in: "path"
        description: "maximum number of podcasts to return"
        required: true
        schema:
          type: "number"
      - name: "tag"
        in: "path"
        description: "URL-encoded tag"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
  /data/podcast.json:
    get:
      tags:
      - "Directory"
      summary: "Retrieve Podcast Data"
      description: "Returns information for the podcast with the given URL or 404 if there is no podcast with this URL."
      parameters:
      - name: "url"
        in: "query"
        description: "the feed URL of the podcast"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    ClientConfiguration:
      type: "object"
      properties:
        mygpo:
          type: "object"
          properties:
            baseurl:
              type: "string"
              description: "URL to which the gpodder.net API Endpoints should be appended"
        mygpo-feedservice:
          properties:
            baseurl:
              type: "string"
              description: "Base URL of the gpodder.net feed service"
        update_timeout:
          type: "integer"
          description: "Time in seconds for which the values in this file can be considered valid."